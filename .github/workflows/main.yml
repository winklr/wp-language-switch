# This is a basic workflow to help you get started with Actions

name: CI Build and Release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
    tags:
      - "v*" # Run workflow on version tags, e.g. v1.0.0
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-outs your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run composer install
        run: |
          composer install --no-dev --prefer-dist

      # Runs a set of commands using the runners shell
      - name: Create a build branch
        run: |
          # Get the reference type (branch or tag)
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # For tags, create a branch name based on the tag
            TAG_NAME=${GITHUB_REF#refs/tags/}
            BRANCH_NAME="tag-$TAG_NAME"
          else
            # For branches, extract the branch name
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi

          # Check if files exist before manipulating them
          if [ -f .gitignore ]; then
            rm .gitignore
          fi

          if [ -f .deployignore ]; then
            mv .deployignore .gitignore
          fi

          # Configure git
          git config --global user.email "ci@company.com"
          git config --global user.name "Company CI"
          git remote set-url origin https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git

          # Create and push the build branch
          git checkout -b $BRANCH_NAME-built
          git add -A
          git commit -m "built from $GITHUB_SHA for ${GITHUB_REF}"
          git push --force -u origin $BRANCH_NAME-built

          # Output the branch name for later use if needed
          echo "BUILD_BRANCH=$BRANCH_NAME-built" >> $GITHUB_ENV

      # Create zip file of the plugin
      - name: Create plugin zip file
        run: |
          PLUGIN_NAME=$(basename $GITHUB_REPOSITORY)
          mkdir -p $PLUGIN_NAME
          # Copy only the files needed for distribution
          rsync -av --exclude=".git" --exclude=".github" --exclude="node_modules" --exclude="tests" --exclude=".gitignore" --exclude="package.json" --exclude="package-lock.json" --exclude="composer.json" --exclude="composer.lock" --exclude="phpunit.xml" --exclude="*.md" --exclude=".deployignore" ./ $PLUGIN_NAME/
          zip -r $PLUGIN_NAME.zip $PLUGIN_NAME

      # Use manual artifact upload since the action is failing
      - name: Upload plugin zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-zip
          path: "*.zip"

  # Create GitHub release when a tag is pushed
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download plugin zip
        uses: actions/download-artifact@v4
        with:
          name: plugin-zip

      - name: Get tag name
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.zip"
          name: Release ${{ steps.get_tag.outputs.TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
